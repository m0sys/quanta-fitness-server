scalar Time

type Workout {
  id: ID!
  title: String!
  createdAt: Time!
  updatedAt: Time!
  user: PublicUser!
}

type Exercise {
    id: ID!
    name: String!
    wid: ID!
    user: PublicUser!
    weight: Float!
    targetRep: Int!
    restTime: Float!
    numSets: Int!
    createdAt: Time!
    updatedAt: Time!
}

type Eset {
    id: ID!
    eid: ID!
    user: PublicUser!
    actualRepCount: Int!
    duration: Float!
    restTimeDuration: Float!
    createdAt: Time!
    updatedAt: Time!
}

type PublicUser {
    username: String!
    weight: Float!
    height: Float!
    gender: String!
}


input NewUser {
  username: String!
  email: String!
  password: String!
  confirm: String!
}

input Login {
  username: String
  email: String
  password: String!
}

input NewWorkout {
  title: String!
}

input WorkoutUpdate {
    id: ID!
    title: String!
}

input NewExercise {
    wid: ID!
    name: String!
}

input ExerciseUpdate {
    id: ID!
    name: String!
    weight: Float!
    targetRep: Int!
    restTime: Float!
    numSets: Int!
}

input NewEset {
    eid: ID!
    actualRepCount: Int!
    duration: Float!
    restTimeDuration: Float!
}

input EsetUpdate {
    id: ID!
    actualRepCount: Int!
    duration: Float!
    restTimeDuration: Float!
}

type Auth {
    token: String!
}

type Query {
  users: [PublicUser!]!
  workouts(username: String!): [Workout!]!
  workout(id: ID!): Workout
  exercise(id: ID!): Exercise
  exercises(wid: ID!): [Exercise!]!
  eset(id: ID!): Eset
  esets(eid: ID!): [Eset!]!
}

type Mutation {
  register(input: NewUser!): Auth!
  login(input: Login!): Auth!
  createWorkout(input: NewWorkout!): Workout!
  updateWorkout(input: WorkoutUpdate!): Boolean!
  deleteWorkout(id: ID!): Boolean! 
  addExerciseToWorkout(input: NewExercise!): Exercise!
  updateExercise(input: ExerciseUpdate!): Boolean!
  deleteExercise(id: ID!): Boolean!
  addEsetToExercise(input: NewEset!): Eset!
  updateEset(input: EsetUpdate!): Boolean!
  deleteEset(id: ID!): Boolean!
}
