scalar Time

type Workout {
  id: ID!
  title: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  weight: Float!
  height: Float!
  gender: String!
}


input NewUser {
  username: String!
  email: String!
  password: String!
  confirm: String!
}

input Login {
  username: String
  email: String
  password: String!
}

input NewWorkout {
  title: String!
}

input WorkoutUpdate {
    id: ID!
    title: String!
}

type Auth {
    token: String!
}

type Query {
  users: [User!]!
  workouts(username: String!): [Workout!]!
  workout(id: ID!): Workout
}

type Mutation {
  register(input: NewUser!): Auth!
  login(input: Login!): Auth!
  createWorkout(input: NewWorkout!): Workout!
  updateWorkout(input: WorkoutUpdate!): Boolean!
  deleteWorkout(id: ID!): Boolean! 
}
