// Code generated by sqlc. DO NOT EDIT.
// source: planning.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const findAllExercisesForWorkoutPlan = `-- name: FindAllExercisesForWorkoutPlan :many
SELECT id, wpid, aid, name, target_rep, num_sets, weight, rest_duration, created_at, updated_at FROM exercises
WHERE wpid = $1
`

func (q *Queries) FindAllExercisesForWorkoutPlan(ctx context.Context, wpid uuid.UUID) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, findAllExercisesForWorkoutPlan, wpid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Wpid,
			&i.Aid,
			&i.Name,
			&i.TargetRep,
			&i.NumSets,
			&i.Weight,
			&i.RestDuration,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllWorkoutPlansForAthlete = `-- name: FindAllWorkoutPlansForAthlete :many
SELECT id, aid, title, created_at, updated_at FROM workout_plans
WHERE aid = $1
`

func (q *Queries) FindAllWorkoutPlansForAthlete(ctx context.Context, aid uuid.UUID) ([]WorkoutPlan, error) {
	rows, err := q.db.QueryContext(ctx, findAllWorkoutPlansForAthlete, aid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkoutPlan
	for rows.Next() {
		var i WorkoutPlan
		if err := rows.Scan(
			&i.ID,
			&i.Aid,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findExerciseByID = `-- name: FindExerciseByID :one
SELECT id, wpid, aid, name, target_rep, num_sets, weight, rest_duration, created_at, updated_at FROM exercises
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindExerciseByID(ctx context.Context, id uuid.UUID) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, findExerciseByID, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Wpid,
		&i.Aid,
		&i.Name,
		&i.TargetRep,
		&i.NumSets,
		&i.Weight,
		&i.RestDuration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findExerciseByNameAndWorkoutPlanID = `-- name: FindExerciseByNameAndWorkoutPlanID :one
SELECT id, wpid, aid, name, target_rep, num_sets, weight, rest_duration, created_at, updated_at FROM exercises
WHERE name = $1 AND wpid = $2 LIMIT 1
`

type FindExerciseByNameAndWorkoutPlanIDParams struct {
	Name string    `json:"name"`
	Wpid uuid.UUID `json:"wpid"`
}

func (q *Queries) FindExerciseByNameAndWorkoutPlanID(ctx context.Context, arg FindExerciseByNameAndWorkoutPlanIDParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, findExerciseByNameAndWorkoutPlanID, arg.Name, arg.Wpid)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Wpid,
		&i.Aid,
		&i.Name,
		&i.TargetRep,
		&i.NumSets,
		&i.Weight,
		&i.RestDuration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findWorkoutPlanByID = `-- name: FindWorkoutPlanByID :one
SELECT id, aid, title, created_at, updated_at FROM workout_plans
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindWorkoutPlanByID(ctx context.Context, id uuid.UUID) (WorkoutPlan, error) {
	row := q.db.QueryRowContext(ctx, findWorkoutPlanByID, id)
	var i WorkoutPlan
	err := row.Scan(
		&i.ID,
		&i.Aid,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findWorkoutPlanByIDAndAthleteID = `-- name: FindWorkoutPlanByIDAndAthleteID :one
SELECT id, aid, title, created_at, updated_at FROM workout_plans
WHERE id = $1 AND aid = $2 LIMIT 1
`

type FindWorkoutPlanByIDAndAthleteIDParams struct {
	ID  uuid.UUID `json:"id"`
	Aid uuid.UUID `json:"aid"`
}

func (q *Queries) FindWorkoutPlanByIDAndAthleteID(ctx context.Context, arg FindWorkoutPlanByIDAndAthleteIDParams) (WorkoutPlan, error) {
	row := q.db.QueryRowContext(ctx, findWorkoutPlanByIDAndAthleteID, arg.ID, arg.Aid)
	var i WorkoutPlan
	err := row.Scan(
		&i.ID,
		&i.Aid,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findWorkoutPlanByTitleAndAthleteID = `-- name: FindWorkoutPlanByTitleAndAthleteID :one
SELECT id, aid, title, created_at, updated_at FROM workout_plans
WHERE title = $1 AND aid = $2 LIMIT 1
`

type FindWorkoutPlanByTitleAndAthleteIDParams struct {
	Title string    `json:"title"`
	Aid   uuid.UUID `json:"aid"`
}

func (q *Queries) FindWorkoutPlanByTitleAndAthleteID(ctx context.Context, arg FindWorkoutPlanByTitleAndAthleteIDParams) (WorkoutPlan, error) {
	row := q.db.QueryRowContext(ctx, findWorkoutPlanByTitleAndAthleteID, arg.Title, arg.Aid)
	var i WorkoutPlan
	err := row.Scan(
		&i.ID,
		&i.Aid,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeExercise = `-- name: RemoveExercise :exec
DELETE FROM exercises
WHERE id = $1
`

func (q *Queries) RemoveExercise(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeExercise, id)
	return err
}

const removeWorkoutPlan = `-- name: RemoveWorkoutPlan :exec
DELETE FROM workout_plans
WHERE id = $1
`

func (q *Queries) RemoveWorkoutPlan(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeWorkoutPlan, id)
	return err
}

const storeExercise = `-- name: StoreExercise :exec
INSERT INTO exercises (
    id,
    aid,
    wpid,
    target_rep,
    num_sets,
    weight,
    rest_duration
    ) VALUES (
    $1, $2, $3, $4, $5, $6, $7)
`

type StoreExerciseParams struct {
	ID           uuid.UUID `json:"id"`
	Aid          uuid.UUID `json:"aid"`
	Wpid         uuid.UUID `json:"wpid"`
	TargetRep    int32     `json:"target_rep"`
	NumSets      int32     `json:"num_sets"`
	Weight       float64   `json:"weight"`
	RestDuration float64   `json:"rest_duration"`
}

func (q *Queries) StoreExercise(ctx context.Context, arg StoreExerciseParams) error {
	_, err := q.db.ExecContext(ctx, storeExercise,
		arg.ID,
		arg.Aid,
		arg.Wpid,
		arg.TargetRep,
		arg.NumSets,
		arg.Weight,
		arg.RestDuration,
	)
	return err
}

const storeWorkoutPlan = `-- name: StoreWorkoutPlan :exec
INSERT INTO workout_plans (
    id,
    aid,
    title
    ) VALUES (
    $1, $2, $3)
`

type StoreWorkoutPlanParams struct {
	ID    uuid.UUID `json:"id"`
	Aid   uuid.UUID `json:"aid"`
	Title string    `json:"title"`
}

func (q *Queries) StoreWorkoutPlan(ctx context.Context, arg StoreWorkoutPlanParams) error {
	_, err := q.db.ExecContext(ctx, storeWorkoutPlan, arg.ID, arg.Aid, arg.Title)
	return err
}

const updateExercise = `-- name: UpdateExercise :exec
UPDATE exercises
SET name = $2,
    target_rep = $3,
    num_sets = $4,
    weight = $5,
    rest_duration = $6
WHERE id = $1
`

type UpdateExerciseParams struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	TargetRep    int32     `json:"target_rep"`
	NumSets      int32     `json:"num_sets"`
	Weight       float64   `json:"weight"`
	RestDuration float64   `json:"rest_duration"`
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) error {
	_, err := q.db.ExecContext(ctx, updateExercise,
		arg.ID,
		arg.Name,
		arg.TargetRep,
		arg.NumSets,
		arg.Weight,
		arg.RestDuration,
	)
	return err
}

const updateWorkoutPlan = `-- name: UpdateWorkoutPlan :exec
UPDATE workout_plans
SET title = $2,
    updated_at = now()
WHERE id = $1
`

type UpdateWorkoutPlanParams struct {
	ID    uuid.UUID `json:"id"`
	Title string    `json:"title"`
}

func (q *Queries) UpdateWorkoutPlan(ctx context.Context, arg UpdateWorkoutPlanParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkoutPlan, arg.ID, arg.Title)
	return err
}
